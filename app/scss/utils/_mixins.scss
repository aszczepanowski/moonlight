// main: ../style.scss
@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin selection($selection-bg: $primary, $selection-text: $white) {
  ::-moz-selection {
    background-color: $selection-bg;
    color: $selection-text;
  }
  ::selection {
    background-color: $selection-bg;
    color: $selection-text;
  }
}

@mixin tag-selection($tag-selection-bg: $primary, $tag-selection-text: $white) {
  &::-moz-selection {
    background-color: $tag-selection-bg;
    color: $tag-selection-text;
  }
  &::selection {
    background-color: $tag-selection-bg;
    color: $tag-selection-text;
  }
}

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
}

@mixin box-sizing($box-model) {
  @include prefixer(box-sizing, $box-model, webkit moz spec);
}

@mixin border-radius($radius) {
  @include prefixer(border-radius, $radius, webkit moz spec);
}

@mixin border-top-radius($radius) {
  @include prefixer(border-top-right-radius, $radius, webkit moz spec);
  @include prefixer(border-top-left-radius, $radius, webkit moz spec);
}

@mixin border-top-right-radius($radius) {
  @include prefixer(border-top-right-radius, $radius, webkit moz spec);
}

@mixin border-top-left-radius($radius) {
  @include prefixer(border-top-left-radius, $radius, webkit moz spec);
}

@mixin border-right-radius($radius) {
  @include prefixer(border-top-right-radius, $radius, webkit moz spec);
  @include prefixer(border-bottom-right-radius, $radius, webkit moz spec);
}

@mixin border-bottom-radius($radius) {
  @include prefixer(border-bottom-right-radius, $radius, webkit moz spec);
  @include prefixer(border-bottom-left-radius, $radius, webkit moz spec);
}

@mixin border-bottom-right-radius($radius) {
  @include prefixer(border-bottom-right-radius, $radius, webkit moz spec);
}

@mixin border-bottom-left-radius($radius) {
  @include prefixer(border-bottom-left-radius, $radius, webkit moz spec);
}

@mixin border-left-radius($radius) {
  @include prefixer(border-top-left-radius, $radius, webkit moz spec);
  @include prefixer(border-bottom-left-radius, $radius, webkit moz spec);
}

// @mixin box-shadow($top, $left, $blur, $color, $alpha, $inset: false) {
//   $rgba: rgba($color, $alpha);
//   @if $inset {
//     @include prefixer(box-shadow, inset $top $left $blur $rgba, webkit moz spec);
//   } @else {
//     @include prefixer(box-shadow, $top $left $blur $rgba, webkit moz spec);
//   }
// }

@mixin box-shadow($box-shadows...) {
  @include prefixer(box-shadow, $box-shadows, webkit moz spec);
}

@mixin box-shadow-none {
  @include prefixer(box-shadow, none, webkit moz spec);
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}

@mixin keyframes($name) {
  $original-prefix-for-webkit:    $prefix-for-webkit;
  $original-prefix-for-mozilla:   $prefix-for-mozilla;
  $original-prefix-for-microsoft: $prefix-for-microsoft;
  $original-prefix-for-opera:     $prefix-for-opera;
  $original-prefix-for-spec:      $prefix-for-spec;

  @if $original-prefix-for-webkit {
    @include disable-prefix-for-all();
    $prefix-for-webkit: true !global;
    @-webkit-keyframes #{$name} {
      @content;
    }
  }

  @if $original-prefix-for-mozilla {
    @include disable-prefix-for-all();
    $prefix-for-mozilla: true !global;
    @-moz-keyframes #{$name} {
      @content;
    }
  }

  $prefix-for-webkit:    $original-prefix-for-webkit    !global;
  $prefix-for-mozilla:   $original-prefix-for-mozilla   !global;
  $prefix-for-microsoft: $original-prefix-for-microsoft !global;
  $prefix-for-opera:     $original-prefix-for-opera     !global;
  $prefix-for-spec:      $original-prefix-for-spec      !global;

  @if $original-prefix-for-spec {
    @keyframes #{$name} {
      @content;
    }
  }
}

@mixin animation($animations) {
  @include prefixer(animation, $animations, webkit moz spec);
}

@mixin animation-name($names) {
  @include prefixer(animation-name, $names, webkit moz spec);
}

@mixin animation-duration($times) {
  @include prefixer(animation-duration, $times, webkit moz spec);
}

@mixin animation-timing-function($motions) {
  @include prefixer(animation-timing-function, $motions, webkit moz spec);
}

@mixin animation-iteration-count($values) {
  @include prefixer(animation-iteration-count, $values, webkit moz spec);
}

@mixin animation-direction($directions) {
  @include prefixer(animation-direction, $directions, webkit moz spec);
}

@mixin animation-play-state($states) {
  @include prefixer(animation-play-state, $states, webkit moz spec);
}

@mixin animation-delay($times) {
  @include prefixer(animation-delay, $times, webkit moz spec);
}

@mixin animation-fill-mode($modes) {
  @include prefixer(animation-fill-mode, $modes, webkit moz spec);
}

@mixin transform($property: none) {
  @include prefixer(transform, $property, webkit moz spec);
}

@mixin transform-origin($axes: 50%) {
  @include prefixer(transform-origin, $axes, webkit moz spec);
}

@mixin transform-style($style: flat) {
  @include prefixer(transform-style, $style, webkit moz spec);
}

@mixin transition($properties...) {
  $needs-prefixes: false;
  $webkit: ();
  $moz: ();
  $spec: ();

  @each $list in $properties {
    @if nth($list, 1) == "transform" {
      $needs-prefixes: true;
      $list1: -webkit-transform;
      $list2: -moz-transform;
      $list3: ();

      @each $var in $list {
        $list3: join($list3, $var);

        @if $var != "transform" {
          $list1: join($list1, $var);
          $list2: join($list2, $var);
          $list3: join($list3, $var);
        }
      }

      $webkit: append($webkit, $list1);
      $moz:    append($moz,    $list2);
      $spec:   append($spec,   $list3);
    } @else {
      $webkit: append($webkit, $list, comma);
      $moz:    append($moz,    $list, comma);
      $spec:   append($spec,   $list, comma);
    }
  }

  @if $needs-prefixes {
    -webkit-transition: $webkit;
       -moz-transition: $moz;
         -o-transition: $moz;
            transition: $spec;
  } @else {
    @if length($properties) >= 1 {
      @include prefixer(transition, $properties, webkit moz spec);
    } @else {
      $properties: all 0.25s ease 0s;
      @include prefixer(transition, $properties, webkit moz spec);
    }
  }
}

@mixin transition-property($properties...) {
  @include prefixer(transition-property, $properties, webkit moz spec);
}

@mixin transition-duration($times...) {
  @include prefixer(transition-duration, $times, webkit moz spec);
}

@mixin transition-timing-function($motions...) {
  @include prefixer(transition-timing-function, $motions, webkit moz spec);
}

@mixin transition-delay($times...) {
  @include prefixer(transition-delay, $times, webkit moz spec);
}

@mixin linear-gradient($pos, $g1, $g2: null,
                       $g3: null, $g4: null,
                       $g5: null, $g6: null,
                       $g7: null, $g8: null,
                       $g9: null, $g10: null,
                       $fallback: null) {

  $pos-type: type-of(nth($pos, 1));
  $pos-spec: null;
  $pos-degree: null;

  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $g10: $g9; $g9: $g8; $g8: $g7; $g7: $g6; $g6: $g5;
    $g5: $g4; $g4: $g3; $g3: $g2; $g2: $g1; $g1: $pos;
    $pos: null;
  }

  @if $pos {
    $positions: _linear-positions-parser($pos);
    $pos-degree: nth($positions, 1);
    $pos-spec:   nth($positions, 2);
  }

  $full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;

  $fallback-color: nth($g1, 1);

  @if (type-of($fallback) == color) or ($fallback == "transparent") {
    $fallback-color: $fallback;
  }

  background-color: $fallback-color;
  background-image: -webkit-linear-gradient($pos-degree $full);
  background-image: linear-gradient($pos-spec $full);
}

@mixin rgba($color, $alpha) {
  $rgba: rgba($color, $alpha);
  background-color: $rgba;
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url(quote($image));
    background-size: $width $height;
  }
}

@mixin full-screen($position: absolute) {
  position: $position;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin position($position: relative, $coordinates: null null null null) {
  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $coordinates: unpack($coordinates);

  $offsets: (
    top:    nth($coordinates, 1),
    right:  nth($coordinates, 2),
    bottom: nth($coordinates, 3),
    left:   nth($coordinates, 4)
  );

  position: $position;

  @each $offset, $value in $offsets {
    @if is-length($value) {
      #{$offset}: $value;
    }
  }
}

@mixin font-face($font-family, $file-name, $font-weight: null, $font-style: null, $font-formats: woff2 woff) {
  $src: null;
  $file-path: "../fonts/";

  @each $font-format in $font-formats {
    $file-ext: $font-format;
    $src: append($src, url(quote($file-path + $file-name + "." + $file-ext)) format(quote($font-format)), comma);
  }

  @font-face {
    font-family: quote($font-family);
    font-weight: $font-weight;
    font-style: $font-style;
    src: $src;
  }
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin backface-visibility($visibility) {
  @include prefixer(backface-visibility, $visibility, webkit moz spec);
}

@mixin appearance($value) {
  @include prefixer(appearance, $value, webkit moz spec);
}

@mixin perspective($depth: none) {
  @include prefixer(perspective, $depth, webkit moz spec);
}

@mixin perspective-origin($value: 50% 50%) {
  @include prefixer(perspective-origin, $value, webkit moz spec);
}

@mixin filter($function: none) {
  @include prefixer(filter, $function, webkit moz spec);
}

@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin float-left {
  float: left !important;
}
@mixin float-right {
  float: right !important;
}
@mixin float-none {
  float: none !important;
}

@mixin text-left {
  text-align: left;
}

@mixin text-right {
  text-align: right;
}

@mixin text-center {
  text-align: center;
}

@mixin text-justify {
  text-align: justify;
}
